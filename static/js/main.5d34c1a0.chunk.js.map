{"version":3,"sources":["types/Status.tsx","components/TodoItem.tsx","components/TodoList.tsx","components/Header.tsx","components/FilterNavLink.tsx","components/TodoFilter.tsx","components/Footer.tsx","App.tsx","hooks/useLocalStorage.tsx","index.tsx"],"names":["Status","TodoItem","todo","toggleCompleted","removeTodo","renameTodo","id","title","completed","useState","isEditing","setIsEditing","newTitle","setNewTitle","selectFieldRef","useRef","handleTitleChange","length","trim","useEffect","current","focus","className","classNames","editing","type","checked","onChange","onDoubleClick","data-cy","aria-label","onClick","value","ref","event","target","onKeyDown","key","onBlur","TodoList","todos","map","Header","addTodo","inputValue","setInputValue","inputRef","onSubmit","e","preventDefault","placeholder","FilterNavLink","to","text","isActive","selected","TodoFilter","Footer","clearCompleted","uncompletedTodos","useMemo","filter","completedTodoLength","TodoApp","initialValue","valueInStorage","localStorage","getItem","JSON","parse","setValue","valueToSave","setItem","stringify","useLocalStorage","setTodos","location","useLocation","filteredTodos","pathname","slice","active","all","useCallback","todoId","updatedTodos","newTodo","Date","every","areCheckedAll","changeAll","htmlFor","updateTodoList","clear","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5d34c1a0.chunk.js","sourcesContent":["export enum Status {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import React, { useState, useRef, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  toggleCompleted: (id: number) => void,\n  removeTodo: (id: number) => void,\n  renameTodo: (id: number, title: string) => void;\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  toggleCompleted,\n  removeTodo,\n  renameTodo,\n}) => {\n  const { id, title, completed } = todo;\n  const [isEditing, setIsEditing] = useState(false);\n  const [newTitle, setNewTitle] = useState(title);\n\n  const selectFieldRef = useRef<HTMLInputElement>(null);\n\n  const handleCheckboxClick = () => {\n    toggleCompleted(id);\n  };\n\n  const handleDoubleClick = () => {\n    setIsEditing(true);\n  };\n\n  const handleTitleEditing = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewTitle(event.target.value);\n  };\n\n  const handleTitleChange = () => {\n    if (newTitle.length || newTitle.trim()) {\n      removeTodo(id);\n      setIsEditing(false);\n\n      return;\n    }\n\n    renameTodo(id, newTitle);\n    setIsEditing(false);\n  };\n\n  const handleSavingTitle = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      handleTitleChange();\n\n      return;\n    }\n\n    if (event.key === 'Escape') {\n      setNewTitle(todo.title);\n      setIsEditing(false);\n    }\n  };\n\n  useEffect(() => {\n    if (selectFieldRef.current) {\n      selectFieldRef.current.focus();\n    }\n  });\n\n  return (\n    <li\n      className={classNames(\n        { completed },\n        { editing: isEditing },\n      )}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id=\"toggle-view\"\n          checked={completed}\n          onChange={handleCheckboxClick}\n        />\n        <label\n          onDoubleClick={handleDoubleClick}\n        >\n          {newTitle}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          data-cy=\"deleteTodo\"\n          aria-label=\"button\"\n          onClick={() => removeTodo(todo.id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={newTitle}\n        ref={selectFieldRef}\n        onChange={handleTitleEditing}\n        onKeyDown={handleSavingTitle}\n        onBlur={handleTitleChange}\n      />\n    </li>\n  );\n};\n","import React from 'react';\nimport { TodoItem } from './TodoItem';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  toggleCompleted: (id: number) => void,\n  removeTodo: (id: number) => void;\n  renameTodo: (id: number, title: string) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  toggleCompleted,\n  removeTodo,\n  renameTodo,\n}) => {\n  return (\n    <ul className=\"todo-list\" data-cy=\"todoList\">\n      {todos.map((todo) => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          toggleCompleted={toggleCompleted}\n          removeTodo={removeTodo}\n          renameTodo={renameTodo}\n        />\n      ))}\n    </ul>\n  );\n};\n","import React, { useState, useRef, useEffect } from 'react';\n\ntype Props = {\n  addTodo: (title: string) => void,\n\n};\n\nexport const Header: React.FC<Props> = ({ addTodo }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInput = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value);\n  };\n\n  const submitForm = (e:React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (inputValue.trim()) {\n      addTodo(inputValue);\n      setInputValue('');\n    }\n  };\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n\n      <form onSubmit={submitForm}>\n        <input\n          type=\"text\"\n          data-cy=\"createTodo\"\n          className=\"new-todo\"\n          ref={inputRef}\n          placeholder=\"What needs to be done?\"\n          value={inputValue}\n          onChange={handleInput}\n        />\n      </form>\n    </header>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\n\ntype Props = {\n  to: string;\n  text: string;\n};\n\nexport const FilterNavLink:React.FC<Props> = ({ to, text }) => {\n  return (\n    <NavLink\n      to={to}\n      className={({ isActive }) => classNames({ selected: isActive })}\n    >\n      {text}\n    </NavLink>\n  );\n};\n\nexport default FilterNavLink;\n","import React from 'react';\nimport { FilterNavLink } from './FilterNavLink';\n\nexport const TodoFilter: React.FC = () => {\n  return (\n    <>\n      <ul className=\"filters\">\n        <li>\n          <FilterNavLink to=\"/\" text=\"All\" />\n        </li>\n        <li>\n          <FilterNavLink to=\"active\" text=\"Active\" />\n        </li>\n        <li>\n          <FilterNavLink to=\"completed\" text=\"Completed\" />\n        </li>\n      </ul>\n    </>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { Todo } from '../types/Todo';\nimport { TodoFilter } from './TodoFilter';\n\ntype Props = {\n  todos: Todo[];\n  clearCompleted: () => void;\n};\n\nexport const Footer: React.FC<Props> = ({\n  todos,\n  clearCompleted,\n}) => {\n  const uncompletedTodos = useMemo(() => {\n    return todos.filter(todo => !todo.completed).length;\n  }, [todos]);\n\n  const completedTodoLength = useMemo(() => {\n    return todos.filter(todo => todo.completed).length;\n  }, [todos]);\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\" data-cy=\"todosCounter\">\n        {`${uncompletedTodos} items left`}\n      </span>\n\n      <TodoFilter />\n\n      {!!completedTodoLength && (\n\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={() => clearCompleted()}\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\n\nimport React, { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useLocalStorage } from './hooks/useLocalStorage';\nimport { TodoList } from './components/TodoList';\nimport { Header } from './components/Header';\nimport { Footer } from './components/Footer';\nimport { Todo } from './types/Todo';\nimport { Status } from './types/Status';\n\nexport const TodoApp:React.FC = () => {\n  const [todos, setTodos] = useLocalStorage('todos', []);\n\n  const location = useLocation();\n\n  const addTodo = (title: string) => {\n    const newTodo = {\n      id: +new Date(),\n      title,\n      completed: false,\n    };\n\n    setTodos([...todos, newTodo]);\n  };\n\n  const toggleCompleted = (todoId: number) => {\n    const updateTodoList = todos.map((todo: Todo) => (\n      todo.id === todoId ? { ...todo, completed: !todo.completed } : todo\n    ));\n\n    setTodos(updateTodoList);\n  };\n\n  const toggleAll = () => {\n    const areCheckedAll = todos.every((todo:Todo) => todo.completed);\n    const changeAll = todos.map((todo: Todo) => (\n      { ...todo, completed: !areCheckedAll }));\n\n    setTodos(changeAll);\n  };\n\n  const filteredTodos = useMemo(() => {\n    return todos.filter((todo: Todo) => {\n      switch (location.pathname.slice(1)) {\n        case Status.active:\n          return !todo.completed;\n\n        case Status.completed:\n          return todo.completed;\n\n        case Status.all:\n        default:\n          return todo;\n      }\n    });\n  }, [todos, location]);\n\n  const removeTodo = useCallback((todoId: number) => {\n    const updatedTodos = todos.filter((todo:Todo) => todo.id !== todoId);\n\n    setTodos(updatedTodos);\n  }, [todos]);\n\n  const clearCompleted = () => {\n    const clear = todos.filter((todo:Todo) => !todo.completed);\n\n    setTodos(clear);\n  };\n\n  const renameTodo = (todoId: number, title: string) => {\n    setTodos(todos.map((todo: Todo) => {\n      if (todo.id !== todoId) {\n        return todo;\n      }\n\n      return { ...todo, title };\n    }));\n  };\n\n  return (\n    <div className=\"todoapp\">\n      <Header\n        addTodo={addTodo}\n      />\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          data-cy=\"toggleAll\"\n          checked={todos.every((todo:Todo) => todo.completed)}\n          onChange={toggleAll}\n\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <TodoList\n          toggleCompleted={toggleCompleted}\n          todos={filteredTodos}\n          removeTodo={removeTodo}\n          renameTodo={renameTodo}\n        />\n      </section>\n\n      {!!todos.length\n        && (\n          <Footer\n            todos={todos}\n            clearCompleted={clearCompleted}\n          />\n        )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { Todo } from '../types/Todo';\n\nexport const useLocalStorage = (key: string, initialValue: Todo[]) => {\n  const [value, setValue] = useState(() => {\n    try {\n      const valueInStorage = localStorage.getItem(key);\n\n      return valueInStorage ? JSON.parse(valueInStorage) : initialValue;\n    } catch {\n      return initialValue;\n    }\n  });\n\n  const saveValue = (valueToSave: Todo[]) => {\n    setValue(valueToSave);\n    localStorage.setItem(key, JSON.stringify(valueToSave));\n  };\n\n  return [value, saveValue];\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport { TodoApp } from './App';\n\nReactDOM.render(\n\n  <HashRouter>\n    <TodoApp />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}